*executioner.txt*        For Vim version 8.1        Last change: 2019 January 06

            _____                    _   _                                     ~
           |  ___|                  | | (_)                                    ~
           | |____  _____  ___ _   _| |_ _  ___  _ __   ___ _ __               ~
           |  __\ \/ / _ \/ __| | | | __| |/ _ \| '_ \ / _ \ '__|              ~
           | |___>  <  __/ (__| |_| | |_| | (_) | | | |  __/ |                 ~
           \____/_/\_\___|\___|\__,_|\__|_|\___/|_| |_|\___|_|                 ~

            A Vim plugin to execute files in a terminal window                 ~
            or a separate buffer.                                              ~


                             Reference Manual                                  ~


==============================================================================
CONTENTS                                                  *executioner-contents*

    1. Intro....................................|executioner-intro|
    2. Functionality............................|executioner-functionality|
        2.1 Commands............................|executioner-commands|
            2.2.1 Terminal Window vs. Buffer....|executioner-terminal-vs-buffer|
            2.2.2 Vim Commands..................|executioner-vim-commands|
        2.2 Variables...........................|executioner-variables|
    3. Mappings.................................|executioner-mappings|
    4. Configuration Ideas......................|executioner-ideas|

==============================================================================
1. Intro                                                     *executioner-intro*

Executioner is a plugin that allows you to execute files in a terminal window
or a separate buffer straight from Vim. You can find the most updated version
of the plugin from:

        https://github.com/EvanQuan/vim-executioner

==============================================================================
2. Functionality                                     *executioner-functionality*

There are two aspects to this plugin: configuring files to be ran, and running
them. The commands let you run files in a Vim session, while the variables let
you configure how certain files are to be ran.

------------------------------------------------------------------------------
2.1 Commands                                              *executioner-commands*

This plugin comes with 5 commands:

Each command takes the name of a file as an optional argument, optionally
followed by any command-line arguments. Without any arguments, the current
buffer that is executing the command will be ran with no arguments.

:Executioner [file] [args]                                        *:Executioner*

The file will be executed in a |shell|, where any output will be printed
there. For example: >

        :Executioner
<
will attempt to execute the current buffer with no command-line arguments. >

        :Executioner test.py
<
will attempt to execute "test.py" in the current working directory with no
command-line arguments. >

        :Executioner test.py foo bar 4
<
will attempt to execute "test.py" in the current working directory, with the
command-line arguments "foo", "bar" and "4".

:ExecutionerHorizontal [file] [args]                    *:ExecutionerHorizontal*

If Vim has |terminal| window support, then the file will be executed in
a horizontally-split terminal window. Once the program execution is completed,
the output will be saved in a 'readonly' buffer.

Otherwise, the file will be executed in a shell and its output will be saved
in a horizontally-split 'readonly' buffer. The difference is that without
|terminal| support, no input from the user can be made during the program's
runtime.

:ExecutionerHorizontalBuffer [file] [args]        *:ExecutionerHorizontalBuffer*

Same as `:ExecutionerHorizontal` with no |terminal| window support, forcing
a shell to execute the file and save the output in a horizontally-split
'readonly' buffer.

:ExecutionerVertical [file] [args]                        *:ExecutionerVertical*

If Vim has |terminal| window support, then the file will be executed in
a vertically-split terminal window. Once the program execution is completed,
the output will be saved in a 'readonly' buffer.

Otherwise, the file will be executed in a shell and its output will be saved
in a vertically-split 'readonly' buffer. The difference is that without
|terminal| support, no input from the user can be made during the program's
runtime.

:ExecutionerVerticalBuffer [file] [args]            *:ExecutionerVerticalBuffer*

Same as `:ExecutionerVertical` with no |terminal| window support, forcing
a shell to execute the file and save the output in a vertically-split
'readonly' buffer.

------------------------------------------------------------------------------
2.2.1 Terminal Window vs. Buffer                *executioner-terminal-vs-buffer*

There are advantages and disadvantages to using either the terminal or buffer
for split window execution. Perhaps some day in the future this distinction
will no longer exist and there will be a unified solution.

Terminal~
Pros
    - Accepts standard input from user
    - Prints standard output during program execution
Cons
    - Cannot execute multiple commands directly
    - Does not accept standard input and output redirection

Buffer~
Pros
    - Can execute multiple commands
    - Accepts standard input and output redirection
Cons
    - Does not accept standard input from user
    - Prints standard output after program execution is complete

Standard Input and Standard Output~

If you running a version of Vim that has terminal window support, (i.e.
`:echo has("terminal")` returns `1`), then the horizontal and vertical
commands open an interactive terminal window which updates live as the program
is being executed. This allows for user input from standard input, and
displaying of standard output as it is being printed.

Without the terminal feature available, the horizontal and vertical commands
run the program until completion, and store the standard output of the
executed program in a read-only buffer. Due to this reason, it will not work
for programs that require user input and will not update the standard output
over the course of the program execution.

Multiple Commands~

Certain file types that involve multiple commands to be executed, such as
compiling before executing, do not work with terminal windows. This is because
terminal windows treat every space-separated term after the first argument as
command-line arguments, including ones that end with `;`.

Any terminal window command that involves multiple commands will fall back to
the buffer equivalent if multiple commands are found.

Input and Output Redirection~

For the same reason as multiple commands, terminal windows treat every
space-separated term after the first argument as a command-line argument,
including `>`, `<`, and `|` characters.

Any terminal window command that involves input redirection will fall back to
the buffer equivalent if input redirection operators are found.

------------------------------------------------------------------------------
2.2.2 Vim Commands                                    *executioner-vim-commands*

If any executing command defined in |g:executioner#extensions| or
|g:executioner#names| starts with ':', a Vim command will be executed instead
of a shell, terminal window, or buffer. For example, if the following is
defined in your |vimrc|: >

        let g:executioner#extensions['md'] = ':InstantMarkdownPreview'
        let g:executioner#extensions['markdown'] = ':InstantMarkdownPreview'
<
then running any markdown files with any of the |executioner-commands| will
execute the Vim command `:InstantMarkdownPreview`.

------------------------------------------------------------------------------
2.2 Variables                                            *executioner-variables*

g:executioner#base_name                                *g:executioner#base_name*

Type: |String|
Default: `'@'`

This character represents the base name of the file to run without its
extension. Whenever this character is present in |g:executioner#extensions| or
|g:executioner#names|, it is replaced with the base name provided by the first
argument of |:Exeuctioner|, |:ExecutionerHorizontal|, or
|:ExecutionerVertical|.

For example, if the file 'test.c' executed as follows: >

        :Executioner test.c
<
and files with the "c" extension are executed as follows: >

        let g:executioner#extensions['c'] = 'gcc % -o @.out;./@.out'
<
Then the following substitution will be made: >

        gcc test.c -o test.out;./test.out
<
g:executioner#full_name                                *g:executioner#full_name*

Type: |String|
Default: `'%'`

This character represents the full name of the file to run with its extension.
Whenever this character is present in |g:executioner#extensions| or
|g:executioner#names|, it is replaced with the full name provided by the first
argument of |:Exeuctioner|, |:ExecutionerHorizontal|, or
|:ExecutionerVertical|.

For example, if the file 'test.py' executed as follows: >

        :Executioner test.py
<
and files with the "py" extension are executed as follows: >

        let g:executioner#extensions['py'] = 'python %'
<
Then the following substitution will be made: >

        python test.py
<
g:executioner#extensions                              *g:executioner#extensions*

Type: |Dictionary|
    Key: |String|
    Value: |String|
    Default: >
            {
              'c'      : 'gcc % -o @.out;./@.out',
              'cpp'    : 'g++ % -o @.out;./@.out',
              'hs'     : 'ghci %',
              'java'   : 'javac %;java @',
              'js'     : 'node %',
              'm'      : 'matlab',
              'ml'     : 'ocaml % -o @.out;./@.out',
              'ps1'    : 'powershell ./%',
              'php'    : 'php %',
              'pl'     : 'perl %',
              'prolog' : 'swipl %',
              'py'     : 'python %',
              'py2'    : 'python2 %',
              'R'      : 'Rscript %',
              'r'      : 'Rscript %',
              'rb'     : 'ruby %',
              'rc'     : 'rustc % -o @.out;./@.out',
              'sh'     : 'bash %',
              'swift'  : 'swiftc % -o @.out;./@.out',
            }
<
This determines commands by file extension. For example, if you want to
execute files with the `py` extension, such as `hello_world.py`, with the
`python` command, (i.e. executing `python hello_world.py` in the terminal),
then include: >

        let g:executioner#extensions['py'] = 'python %'
<
in your |vimrc|.


g:executioner#names                                        *g:executioner#names*

Type: |Dictionary|
    Key: |String|
    Value: |String|
Default: `{'makefile' : 'make'}`

This determines commands by file name. For example, if you want to execute
files with the name `makefile` with the command `make`, then include: >

        let g:executioner#names['makefile'] = 'make'
<
in your |vimrc|.


g:executioner#load_defaults                        *g:executioner#load_defaults*

Type: |Number|
Default: `1`

If you wish to disable the default values of |g:executioner#extensions| and
|g:executioner#names| entirely, then include: >

        let g:executioner#load_defaults = 0
<
in your |vimrc|.

==============================================================================
3. Mappings                                               *executioner-mappings*

By default, Executioner does not provide any key mappings as to not override
mappings defined in your |vimrc|. You can map these commands to however you
like to make them easier to use.

For example, I personally use: >

    " Run current buffer
    "
    nnoremap <silent> <leader>rf :Executioner<Return>
    nnoremap <silent> <leader>hrf :ExecutionerHorizontal<Return>
    nnoremap <silent> <leader>vrf :ExecutionerVertical<Return>

    " Run current buffer with input redirected from input.txt
    "
    nnoremap <silent> <leader>ri :ExecutionerBuffer % < input.txt<Return>
    nnoremap <silent> <leader>hri :ExecutionerHorizontalBuffer % < input.txt<Return>
    nnoremap <silent> <leader>vri :ExecutionerVerticalBuffer % < input.txt<Return>

    " run.sh
    "
    nnoremap <silent> <leader>rr :Executioner run.sh<Return>
    nnoremap <silent> <leader>hrr :ExecutionerHorizontal run.sh<Return>
    nnoremap <silent> <leader>vrr :ExecutionerVertical run.sh<Return>

    " Makefile
    "
    nnoremap <silent> <leader>rm :Executioner makefile<Return>
    nnoremap <silent> <leader>hrm :ExecutionerHorizontal makefile<Return>
    nnoremap <silent> <leader>vrm :ExecutionerVertical makefile<Return>
<

Due to the complexity of many projects that span a large number of files,
I use makefiles and `run.sh` to compile and run large projects without needing
to worry about what file I'm currently editing.

==============================================================================
4. Configuration Ideas                             *executioner-ideas*

Depending on the machine I'm on, the `python` command either runs Python 2 or
Python 3. Also, I sometimes have Anaconda installed, which I will want to use
if possible. As a result, I customize what version of Python runs depending on
some other settings I have: >

        let g:executioner#extensions = {}
        if g:settings#python3_execution == 0
          let g:executioner#extensions['py'] = 'python %'
        elseif filereadable(expand('/anaconda3/bin/python'))
          let g:executioner#extensions['py'] = '/anaconda3/bin/python %'
        else
          let g:executioner#extensions['py'] = 'python3 %'
        endif
<
With the help of vim-instant-markdown, found at:

        https://github.com/suan/vim-instant-markdown

I can preview github-flavored markdown files. Since the preview command is ran
in Vim itself and not in a |shell|, I can prepend the command with ":" to
signify I want to run a Vim command:
>
        let g:executioner#extensions['markdown'] = ':InstantMarkdownPreview'
        let g:executioner#extensions['md'] = ':InstantMarkdownPreview'
<
Similarly, with vimtex, found at:

        https://github.com/lervag/vimtex

I can compile and preview LaTeX files with: >

        let g:executioner#extensions['tex'] = ':VimtexCompile'
<
------------------------------------------------------------------------------
vim:tw=78:ts=8:ft=help:noet:expandtab
