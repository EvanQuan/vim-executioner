*executioner.txt*        For Vim version 8.1       Last change: 2018 December 25

            _____                    _   _                                     ~
           |  ___|                  | | (_)                                    ~
           | |____  _____  ___ _   _| |_ _  ___  _ __   ___ _ __               ~
           |  __\ \/ / _ \/ __| | | | __| |/ _ \| '_ \ / _ \ '__|              ~
           | |___>  <  __/ (__| |_| | |_| | (_) | | | |  __/ |                 ~
           \____/_/\_\___|\___|\__,_|\__|_|\___/|_| |_|\___|_|                 ~

            A Vim plugin to easily execute files in the terminal ~
            or a separate buffer. ~


                             Reference Manual                                  ~


==============================================================================
CONTENTS                                                  *executioner-contents*

    1. Intro....................................|executioner-intro|
    2. Functionality............................|executioner-functionality|
        2.1 Commands............................|executioner-commands|
        2.2 Variables...........................|executioner-variables|
    3. Mappings.................................|executioner-mappings|

==============================================================================
1. Intro                                                     *executioner-intro*

Executioner is a plugin that allows you to easily execute files in the
terminal or a separate buffer straight from Vim. You can find the most updated
version of the plugin from:

        https://github.com/EvanQuan/vim-executioner

==============================================================================
2. Functionality                                     *executioner-functionality*

There are two aspects to this plugin: configuring files to be ran, and running
them. The commands let you run files in a Vim session, while the variables let
you configure how certain files are to be ran.

------------------------------------------------------------------------------
2.1 Commands                                              *executioner-commands*

:Executioner [file] [args]                                        *:Executioner*

The file will be executed in in a |shell|, where any output will be printed
there.

:ExecutionerHorizontal [file] [args]                    *:ExecutionerHorizontal*

If Vim has |terminal| window support, then the file will be executed in
a horizontally-split terminal window. Once the program is completed, the
output will be saved in a 'readonly' buffer.

Otherwise, the file will be executed in a shell and its output will be saved
in a horizontally-split 'readonly' buffer. The difference is that without
|terminal| support, no input from the user can be made during the program's
runtime.

:ExecutionerVertical [file] [args]                        *:ExecutionerVertical*

If Vim has |terminal| window support, then the file will be executed in
a vertically-split terminal window. Once the program is completed, the
output will be saved in a 'readonly' buffer.

Otherwise, the file will be executed in a shell and its output will be saved
in a vertically-split 'readonly' buffer. The difference is that without
|terminal| support, no input from the user can be made during the program's
runtime.

------------------------------------------------------------------------------
2.2 Variables                                            *executioner-variables*

g:executioner#base_name                                *g:executioner#base_name*

Type: |String|
Default: `'@'`

This character represents the base name of the file to run without its
extension. Whenever this character is present in |g:executioner#extensions| or
|g:executioner#names|, it is replaced with the base name provided by the first
argument of |:Exeuctioner|, |:ExecutionerHorizontal|, or
|:ExecutionerVertical|.

For example, if the file 'test.c' executed as follows: >

        :Executioner test.c
<
and files with the "c" extension are executed as follows: >

        let g:executioner#extensions['c'] = 'gcc % -o @.out;./@.out'
<
Then the following substitution will be made: >

        gcc test.c -o test.out;./test.out
<
g:executioner#full_name                                *g:executioner#full_name*

Type: |String|
Default: `'%'`

This character represents the full name of the file to run with its extension.
Whenever this character is present in |g:executioner#extensions| or
|g:executioner#names|, it is replaced with the full name provided by the first
argument of |:Exeuctioner|, |:ExecutionerHorizontal|, or
|:ExecutionerVertical|.

For example, if the file 'test.py' executed as follows: >

        :Executioner test.py
<
and files with the "py" extension are executed as follows: >

        let g:executioner#extensions['py'] = 'python %'
<
Then the following substitution will be made: >

        python test.py
<
g:executioner#extensions                              *g:executioner#extensions*

Type: |Dictionary|
    Key: |String|
    Value: |String|
    Default: >
            {
              'c'      : 'gcc % -o @.out;./@.out',
              'cpp'    : 'g++ % -o @.out;./@.out',
              'hs'     : 'ghci %',
              'js'     : 'node %',
              'm'      : 'matlab',
              'ml'     : 'ocaml % -o @.out;./@.out',
              'php'    : 'php %',
              'pl'     : 'perl %',
              'prolog' : 'swipl %',
              'py'     : 'python %',
              'py2'    : 'python2 %',
              'R'      : 'Rscript %',
              'r'      : 'Rscript %',
              'rb'     : 'ruby %',
              'rc'     : 'rustc % -o @.out;./@.out',
              'sh'     : 'bash %',
              'swift'  : 'swiftc % -o @.out;./@.out',
            }
<
This determines commands by file extension. For example, if you want to
execute files with the `py` extension, such as `hello_world.py`, with the
`python` command, (i.e. executing `python hello_world.py` in the terminal),
then include: >

        let g:executioner#extensions['py'] = 'python %'
<
in your |vimrc|.


g:executioner#names                                        *g:executioner#names*

Type: |Dictionary|
    Key: |String|
    Value: |String|
Default: `{'makefile' : 'make'}`

This determines commands by file name. For example, if you want to execute
files with the name `makefile` with the command `make`, then include: >

        let g:executioner#names['makefile'] = 'make'
<
in your |vimrc|.


g:executioner#load_defaults                        *g:executioner#load_defaults*

Type: |Number|
Default: `1`

If you wish to disable the default values of |g:executioner#extensions| and
|g:executioner#names| entirely, then include: >

        let g:executioner#load_defaults = 0
<
in your |vimrc|.

==============================================================================
3. Mappings                                               *executioner-mappings*

By default, Executioner does not provide any key mappings as to not override
mappings defined in your |vimrc|. You can map these commands to however you
like to make them easier to use.

For example, I personally use: >

    " Run current buffer
    "
    nnoremap <silent> <leader>rf :Executioner<Return>
    nnoremap <silent> <leader>hrf :ExecutionerHorizontal<Return>
    nnoremap <silent> <leader>vrf :ExecutionerVertical<Return>

    " run.sh
    "
    nnoremap <silent> <leader>rr :Executioner run.sh<Return>
    nnoremap <silent> <leader>hrr :ExecutionerHorizontal run.sh<Return>
    nnoremap <silent> <leader>vrr :ExecutionerVertical run.sh<Return>

    " Makefile
    "
    nnoremap <silent> <leader>rm :Executioner makefile<Return>
    nnoremap <silent> <leader>hrm :ExecutionerHorizontal makefile<Return>
    nnoremap <silent> <leader>vrm :ExecutionerVertical makefile<Return>
<

Due to the complexity of many projects that span a large number of files,
I use makefiles and `run.sh` to compile and run large projects without needing
to worry about what file I'm currently editing.

------------------------------------------------------------------------------
vim:tw=78:ts=8:ft=help:noet:expandtab
